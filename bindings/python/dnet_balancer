#!/usr/bin/env python

# =============================================================================
# 2013+ Copyright (c) Kirill Smorodinnikov <shaitkir@gmail.com>
# All rights reserved.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# =============================================================================
'''
dnet_balancer - tool for rebalancing ranges in route list. It doesn't create
new ranges. Instead of this it splits large range into 2 equal range by moving
route which specifies small range. It continues doing this until all range
will be between min and max deviation or we will get situation when smallest
range is located in largest range.

dnet_balancer can be used as executable script and be configurated via command
line or as module then you should use balance() method and pass custom options
to it.
'''

import sys
import logging
import logging.handlers
from operator import itemgetter, attrgetter

import elliptics

#initializing logger
log = logging.getLogger()
log.setLevel(logging.DEBUG)
formatter = logging.Formatter(fmt='%(asctime)-15s %(processName)s '
                              '%(levelname)s %(message)s',
                              datefmt='%d %b %y %H:%M:%S')
#initializing stderr stream handler for logs
ch = logging.StreamHandler(sys.stderr)
ch.setFormatter(formatter)
ch.setLevel(logging.INFO)
log.addHandler(ch)


#total size of DHT ring
total = int(str(elliptics.Id([255] * 64, 0)), 16)


def convert_to_id(value, group):
    '''
    Converts big int value from DHT ring into elliptics.Id
    '''
    id = []
    while value and len(id) <= 64:
        id.insert(0, value % 256)
        value /= 256

    if len(id) < 64:
        id = [0] * (64 - len(id)) + id

    return elliptics.Id(id, group)


def compute_ranges(routes):
    '''
    Computes length of each range from route list
    '''
    ranges = []
    for index, route in enumerate(routes):
        position = int(str(route.id), 16)
        if index == len(routes) - 1:
            length = total - position + int(str(routes.routes[0].id), 16)
        else:
            length = int(str(routes[index + 1].id), 16) - position
        ranges.append(length)
    return ranges


def find_min_max_ranges(ranges, middle_size):
    '''
    Finds maximum and minimum range
    Returns them along with their indices in route list
    '''
    min_candidate = [(i, l) for i, l in enumerate(ranges)
                     if ranges[i - 1] != middle_size and l < middle_size]
    if not min_candidate:
        return None, None
    min_range = min(min_candidate, key=itemgetter(1))  # find smallest one
    max_range = max(enumerate(ranges), key=itemgetter(1))  # find largest one

    #calculate size of range which will be without minimum range
    length_without_min = min_range[1] + ranges[min_range[0] - 1]

    #if smallest range is located in the biggest range
    #change largest range to range which is obtained
    #after removing smallest range
    if max_range[1] < length_without_min:
        index = min_range[0] - 1
        if index == -1:
            index = len(ranges) - 1
        max_range = (index, length_without_min)

    return min_range, max_range


def log_spread(spread):
    '''
    Creates spread string
    '''
    spread_str = ''
    spread = spread.items()
    spread.sort(key=lambda addr_info: addr_info[1]['total'], reverse=True)
    for address, addr_spread in spread:
        addr_spread = addr_spread.items()
        addr_spread.sort(key=itemgetter(1), reverse=True)
        for backend, perc in addr_spread:
            spread_str += '\tHost {0}/{1} {2:.2f}\n'.format(address, backend, perc)
    return spread_str


def save_ids(routes, addresses):
    '''
    For each address from @addresses creates ids file based on @routes
    Returns [(ids_filename, address)]
    '''
    mapping = []
    from struct import pack
    for addr, backend_id in addresses:
        addr_routes = routes.filter_by_address(addr).filter_by_backend(backend_id)
        filename = 'ids.' + str(hash(addr)) + '.' + str(backend_id)
        with open(filename, 'w') as f:
            for r in addr_routes:
                data = pack('B' * 64, *r.id.id)
                f.write(data)
        mapping.append((filename, addr, backend_id))
    return mapping


def remove_fake_routes(routes):
    '''
    Removes fake 0x00..0 and 0xff..f routes from route list
    '''
    #removes route with key 0x00..0 if it is fake
    if routes.routes[0].address == routes.routes[-1].address:
        del routes.routes[0]
    #removes route with key 0xff..f if it is fake
    if len(routes.routes) > 1 and routes.routes[-1].address == routes.routes[-2].address:
        del routes.routes[-1]


def restore_fake_routes(routes, group):
    '''
    Adds fake 0x00..0 and 0xff..f routes to route list
    '''
    #Adds fake 0x00..0 route for calculating spread
    if routes.routes[0].id != elliptics.Id([0] * 64, group):
        routes.routes.insert(0, elliptics.Route(elliptics.Id([0] * 64, group),
                                                routes.routes[-1].address,
                                                routes.routes[-1].backend_id))
    #Adds fake 0xff..f route for calculating spread value
    if routes.routes[-1].id != elliptics.Id([255] * 64, group):
        routes.routes.append(elliptics.Route(elliptics.Id([255] * 64, group),
                                             routes.routes[-1].address,
                                             routes.routes[-1].backend_id))


def balance_group(group, routes, min_deviation, max_deviation):
    '''
    Balance the ranges in group route list.
    It finds smallest and largest ranges and moves route
    which specifies smallest range to center of largest one.
    So largest range is splitted into 2 equal ranges
    And smallest range is added to previous non-largest range.
    '''
    updated_addresses = set()
    log.debug("Origin routes:\n{0}".format(routes))
    log.debug("Origin spread:\n{0}".format(log_spread(routes.percentages()[group])))

    remove_fake_routes(routes)

    ranges_count = len(routes)
    middle_size = total / ranges_count  # calculates middle size of range

    #calculates deviation with respect to middle size
    max_size = middle_size * max_deviation
    min_size = middle_size * min_deviation

    iterations = 0

    ranges = compute_ranges(routes)  # compute length of all ranges

    while True:
        #finds smallest and largest ranges
        min_range, max_range = find_min_max_ranges(ranges, middle_size)

        if not min_range or not max_range:
            break

        #stops if both smallest and largest ranges satisfy deviation
        if min_range[1] >= min_size and max_range[1] <= max_size:
            break

        min_route = routes.routes[min_range[0]]
        max_route = routes.routes[max_range[0]]

        #position of smallest range
        min_position = int(str(min_route.id), 16)
        #position of largest range
        max_position = int(str(max_route.id), 16)

        #shift from max_position where route for smallest range should be moved
        shift = middle_size
        #new position for smallest range route
        new_position = max_position + shift
        log.debug("Old pos: {0}".format(min_position))
        log.debug("New pos: {0}".format(new_position))

        #add length of removing range to previous range
        ranges[min_range[0] - 1] += ranges[min_range[0]]

        #calc length of max_range after splitting it into 2
        new_length = shift

        #updates max_range length to new value
        ranges[max_range[0]] = new_length

        #the rest part of max_range should go to new range
        new_length = max_range[1] - new_length

        #if min_range locates after max_range it could be deleted
        #because its removing doesn't shift max_range in ranges
        if min_range[0] > max_range[0]:
            del ranges[min_range[0]]

        #if min_route new position should be at the begining of route list
        if new_position > total:
            new_position -= total
            #if min_range wasn't removed then we should make it there
            if min_range[0] < max_range[0]:
                del ranges[min_range[0]]
            #adds new range
            ranges.insert(0, new_length)
        else:
            #adds new range
            ranges.insert(max_range[0] + 1, new_length)
            #if min_range wasn't removed then we should make it there
            if min_range[0] < max_range[0]:
                del ranges[min_range[0]]

        #deviation of new postion with respect to current position
        deviation = abs(new_position - min_position) * 1. / middle_size

        #stops if deviation is too small
        #it means that we shift route of smallest range on very small value
        #which doesn't affect to spread.
        if deviation < options.accuracy:
            log.debug("break because of accuracy : {0}, {1}"
                      .format(deviation, options.accuracy))
            break

        #converts new position to elliptics.Id
        new_id = convert_to_id(new_position, group)
        iterations += 1

        log.debug("Old id:{0}".format(routes.routes[min_range[0]].id))
        log.debug("New id:{0}".format(new_id))

        #replaces elliptics.Id in route list for smallest range
        routes.routes[min_range[0]].id = new_id
        #sorts route list by ids
        routes.routes.sort(key=attrgetter('id'))

        #adds address of changed route to set for futher creation of ids file
        updated_addresses.add((min_route.address, min_route.backend_id))

    for index, length in enumerate(ranges):
        log.debug("Route #{0} length {1}"
                  .format(index, length * 1. / middle_size))

    log.debug("Total iterations: {0}".format(iterations))

    #creates ids file for each address whose routes were changed
    ids_mapping = save_ids(routes, updated_addresses)

    for index, length in enumerate(ranges):
        print("Range #{0} - {1}".format(index, length * 1. / middle_size))

    restore_fake_routes(routes, group)
    log.debug("Final routes:\n{0}".format(routes))
    log.debug("Final spread:\n{0}".format(log_spread(routes.percentages()[group])))

    return ids_mapping


def get_routes(options):
    '''
    Connects to elliptics, gets route list and returns it
    '''
    logger = elliptics.Logger(options.log,
                              int(options.log_level))
    node = elliptics.Node(logger)
    node.add_remotes(elliptics.Address.from_host_port_family(options.remote))

    session = elliptics.Session(node)

    routes = session.routes
    session = None
    return routes


def filter_groups(routes, options):
    groups = routes.groups()
    if options.groups:
        groups = [g for g in groups if g in options.groups]
    return groups


def balance(options):
    '''
    Balances ranges in route list
    '''
    routes = get_routes(options)

    groups = filter_groups(routes, options)

    ids_mapping = []

    for g in groups:
        ids_mapping += balance_group(g, routes.filter_by_group(g),
                                     options.min_deviation,
                                     options.max_deviation)

    for filename, address, backend_id in ids_mapping:
        line = "IDS file '{0}' should be copied to node: {1}/{2}".format(filename, address, backend_id)
        log.debug(line)
        print(line)


def check(options):
    '''
    Prints current route list state (spread, ranges length etc.) and exits
    '''
    routes = get_routes(options)

    groups = filter_groups(routes, options)

    for group in groups:
        print("Group #{0} route list info".format(group))
        group_routes = routes.filter_by_group(group)
        remove_fake_routes(group_routes)
        ranges_count = len(group_routes)
        middle_size = total / ranges_count  # calculates middle size of range
        ranges = compute_ranges(group_routes)
        if options.check_mode:
            for index, length in enumerate(ranges):
                print("{0} length {1} -> {2}%"
                      .format(group_routes.routes[index],
                              length * 1. / middle_size,
                              length * 100. / total))
        restore_fake_routes(group_routes, group)
        print log_spread(group_routes.percentages()[group])


if __name__ == '__main__':
    from optparse import OptionParser
    parser = OptionParser()
    parser.usage = "%prog [options]"
    parser.description = __doc__
    parser.add_option("-g", "--groups", action="store", type="string",
                      dest="groups", default=None,
                      help="Comma separated list of groups [default: all]")
    parser.add_option("-l", "--log", dest="log", type="string",
                      default='dnet_balancer.log', metavar="FILE",
                      help="Output log messages from library to file "
                           "[default: %default]")
    parser.add_option("-L", "--log-level", action="store", type="int",
                      dest="log_level", default="1",
                      help="Elliptics client verbosity [default: %default]")
    parser.add_option("-r", "--remote", action="store", type="string",
                      dest="remote", default=None,
                      help="Elliptics node address [default: %default]")
    parser.add_option("-m", "--min-deviation", action='store',
                      dest="min_deviation", default=0.8, type="float",
                      help='Minimum deviation from middle range size')
    parser.add_option("-M", "--max-deviation", action='store',
                      dest="max_deviation", default=1.2, type="float",
                      help='Maximum deviation from middle range size')
    parser.add_option("-a", "--accuracy", action='store', type="float",
                      dest='accuracy', default=10 ** -10,
                      help='Sets accuracy with which route will be considered'
                      'as fixed while shifting it')
    parser.add_option('-c', '--check-mode', action='store_true',
                      dest='check_mode', default=False,
                      help='Prints current route list state '
                      '(spread, ranges length etc.) and exits')
    parser.add_option('-n', '--check-nodes', action='store_true',
                      dest='check_nodes', default=False,
                      help='Prints actial nodes statistics')

    (options, args) = parser.parse_args()

    try:
        fh = logging.FileHandler(options.log)
        fh.setFormatter(formatter)
        fh.setLevel(logging.DEBUG)
        log.addHandler(fh)
    except Exception as e:
        raise ValueError("Can't parse log_level: '{0}': {1}"
                         .format(options.log_level, repr(e)))

    if options.groups:
        options.groups = map(int, options.groups.split(','))

    if options.check_mode or options.check_nodes:
        check(options)
    else:
        balance(options)
